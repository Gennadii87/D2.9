начало работы
from news_portal.models import * 
---------------------------------------------
Создание пользователей

u1 = User.objects.create_user(username='jon')
u2 = User.objects.create_user(username='Den')
---------------------------------------------
Создание авторов

author1 = Author.objects.create(authorUser=u1) 
author2 = Author.objects.create(authorUser=u2)
---------------------------------------------
Добавить 4 категории в модель Category

Category.objects.create(name='Sport')
Category.objects.create(name='Food')  
Category.objects.create(name='Technology') 
Category.objects.create(name='Science') 
---------------------------------------------
Добавить 2 статьи и 1 новость
(Новость)

Post.objects.create(author=author1, categoryType='NW', title='Это заголовок моей статьи', text='В ходе этого модуля вы шаг за шагом изучали принципы построения баз данных и создания моделей, а также размышляли над собственным 
приложением News Portal.')
(Статьи)

Post.objects.create(author=author2, categoryType='AR', title='Обучение по Django', text='Так как это учебный проект, сделаем допущение, что все слова, которые нужно цензурировать, начинаются с верхнего или нижнего регистра. Остальные буквы слов могут быть только в нижнем регистре')
Post.objects.create(author=author1, categoryType='AR', title='Учеба на SkillFactory', text='Дополнительно попробуйте сделать проверку, чтобы фильтр цензурирования применялся только к переменным строкового типа. Иными словами, если фильтр применяется не к строке, разработчик получает ошибку.')
---------------------------------------------

Присвоить им категории (как минимум в одной статье/новости должно быть не меньше 2 категорий)

Post.objects.get(id=1).postCategory.add(Category.objects.get(id=3))
Post.objects.get(id=1).postCategory.add(Category.objects.get(id=4))
Post.objects.get(id=2).postCategory.add(Category.objects.get(id=3))
Post.objects.get(id=3).postCategory.add(Category.objects.get(id=4))
---------------------------------------------

Создать как минимум 4 комментария к разным объектам модели Post (в каждом объекте должен быть как минимум один комментарий).

Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='Это первый комментарий')
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=1).authorUser, text='Это второй комментарий, и он мог быть по лучше') 
Comment.objects.create(commentPost=Post.objects.get(id=1), commentUser=Author.objects.get(id=2).authorUser, text='Это простой текст для примера') 
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=1).authorUser, text='Тут должен быть комментарий' ) 
Comment.objects.create(commentPost=Post.objects.get(id=2), commentUser=Author.objects.get(id=2).authorUser, text='Это отличный курс по django')    
Comment.objects.create(commentPost=Post.objects.get(id=3), commentUser=Author.objects.get(id=2).authorUser, text='Я простой студент')
----------------------------------------------
Применяя функции like() и dislike() к статьям/новостям и комментариям, скорректировать рейтинги этих объектов.
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).like()
Comment.objects.get(id=1).rating 
4
Comment.objects.get(id=2).rating  
0
Comment.objects.get(id=2).dislike()                                                                                                   
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=2).dislike()
Comment.objects.get(id=2).rating    
-3
Post.objects.get(id=1).like()
Post.objects.get(id=1).like()
Post.objects.get(id=1).rating
2
Post.objects.get(id=3).like()  
Post.objects.get(id=3).rating  
1
Post.objects.get(id=2).dislike()  
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).dislike()
Post.objects.get(id=2).like()    
Post.objects.get(id=2).rating
-3
--------------------------------------
Обновление рейтинга пользователя 

Author.objects.get(id=1).update_rating() 
Author.objects.get(id=1).ratingAuthor    
10
Author.objects.get(id=2).update_rating()  
Author.objects.get(id=2).ratingAuthor    
-9
-------------------------------------
Вывести username и рейтинг лучшего пользователя

>>> V = Author.objects.order_by('-ratingAuthor')[:1]
>>> V
<QuerySet [<Author: Author object (1)>]>
>>> V = Author.objects.order_by('-ratingAuthor')
>>> V
<QuerySet [<Author: Author object (1)>, <Author: Author object (2)>]>

получение имени из Author object (1)
>>> first_author = Author.objects.first()
>>> first_author                         
<Author: Author object (1)>
>>> print(first_author.authorUser.username)
jon
------------------------------------
Вывести дату добавления, username автора, рейтинг, заголовок и превью лучшей статьи, основываясь на лайках/дислайках к этой статье.
Импортирую необходимые модели и агрегирующую функцию Max:

>>> from django.db.models import Max
>>> best_post = Post.objects.aggregate(Max('rating'))
>>> post = Post.objects.get(rating=best_post['rating__max'])
>>> print(f"Дата добавления: {post.dateCreation}, "
...       f"Username автора: {post.author.authorUser.username}, "
...       f"Рейтинг: {post.rating}, "
...       f"Заголовок: {post.title}, "
...       f"Превью лучшей статьи: {post.preview()}")
Дата добавления: 2023-05-08 07:58:41.948601+00:00, Username автора: jon, Рейтинг: 2, Заголовок: Это заголовок моей статьи, Превью лучшей статьи: В ходе этого модуля вы шаг за шагом изучали принципы построения ...
-------------------------------------

Получаем индекс этой стать 

>>> post = Post.objects.order_by('-rating').values('id').first()
>>> print(post['id'])

Из полученного узнаем что сатья под индексом 1
с помощью цикла FOR получаем коментарии 

post = Post.objects.get(id=1)
>>> comments = Comment.objects.filter(commentPost=post).select_related('commentUser')
>>> for comment in comments:
...     print(f"Дата: {comment.dateCreation}, Пользователь: {comment.commentUser.username}, Рейтинг: {comment.rating}, Текст: {comment.text}")
... 
Дата: 2023-05-08 08:45:09.256717+00:00, Пользователь: jon, Рейтинг: 4, Текст: Это первый комментарий
Дата: 2023-05-08 08:46:13.607088+00:00, Пользователь: jon, Рейтинг: -3, Текст: Это второй комментарий, и он мог быть по лучше
Дата: 2023-05-08 08:47:51.694156+00:00, Пользователь: Den, Рейтинг: 0, Текст: Это простой текст для примера



  
